{"version":3,"sources":["components/RegLog.js","serviceWorker.js","index.js"],"names":["RegLog","state","email","emailLogin","passwordLogin","password","checked","messegeSuccessForm","errorsValidate","messegeErrorsValidate","handleRegLog","e","name","target","type","value","_this","setState","Object","defineProperty","handleSubmitReg","preventDefault","console","log","validation","formValidation","all","length","indexOf","_this2","this","setTimeout","react_default","a","createElement","Fragment","action","method","onSubmit","noValidate","className","htmlFor","id","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_RegLog","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.87f6ed10.chunk.js","sourcesContent":["import React from 'react';\nimport './RegLog.css';\n\n  class RegLog extends React.Component{\n\n    state = {\n      email:\"\",\n      emailLogin:\"\",\n      passwordLogin:\"\",\n      password:\"\",\n      checked:false,\n      messegeSuccessForm:\"\",\n\n      errorsValidate:  {\n        email:false,\n        password:false,\n        checked:false\n      }\n    }\n\n    messegeErrorsValidate = {\n      email:\"Podaj poprawny email z @\",\n      password:'Hasło musi mieć conajmniej 8 znaków i maksymalni 16',\n      checked:'Musisz wyrazić zgodę na regulamin'\n    }\n    \n\n    handleRegLog = (e) => {\n      const name = e.target.name;\n      const type = e.target.type;\n\n      if(type === 'text' || type === 'password' || type==='email')\n      {\n        const value = e.target.value;\n        this.setState({\n          [name]:value,\n        })\n      }\n      else if(type===\"checkbox\"){\n        \n        this.setState({\n          checked: !this.state.checked,\n        })\n\n      }\n    }\n    \n\n    handleSubmitReg = (e) => {\n      e.preventDefault()\n      console.log('dziala');\n\n\n      const validation = this.formValidation()\n      console.log(validation)\n\n\n\n      if(validation.all){\n\n        this.setState ({\n          email:\"\",\n        password:\"\",\n        checked:false,\n        messegeSuccessForm:\"Formularz został wysłany\",\n        errorsValidate:  {\n          email:false,\n          password:false,\n          checked:false\n        }\n\n        })\n        console.log('wysklany');\n      }   \n      else{\n        this.setState({\n          errorsValidate:  {\n            email:!validation.email,\n            password:!validation.password,\n            checked:!validation.checked\n          }\n        })\n      }\n\n    }\n\n\n\n\n\n\n\n\n\n    formValidation = () => {\n       let checked = false;\n       let password = false;\n       let email = false;\n       let all = false;\n\n       if(this.state.password.length>7 && this.state.password.length<17){\n        password = true\n       }\n\n       if(this.state.email.indexOf('@')!== -1){\n        email = true\n       }\n\n       if(this.state.checked){\n        checked = true\n       }\n\n       if(checked && password && email){\n        all = true\n       }\n\n       return ({\n         all,\n         email,\n         checked,\n         password\n       })\n       \n    }\n\n    componentDidUpdate(){\n\n      if(this.state.messegeSuccessForm !== \"\")\n      {\n\n        setTimeout(()=>{\n          this.setState({\n            messegeSuccessForm: \"\"\n  \n          })\n\n        },3000)        \n      }\n    }\n\n\n   \n    render(){     \n   \n      return(\n        <>\n       <form action=\"/yyy.php\" method=\"get\" onSubmit={this.handleSubmitReg}  noValidate className='formReg'>\n       <label htmlFor='email'>Email:\n          <input type='email' id='email' name='email' value={this.state.email} onChange={this.handleRegLog}/>\n          {this.state.errorsValidate.email?<span>{this.messegeErrorsValidate.email}</span>:null}\n        </label>\n\n        <label htmlFor='password'>Hasło:\n          <input type='password' id='password' name='password' value={this.state.password} onChange={this.handleRegLog}/>\n          {this.state.errorsValidate.password?<span>{this.messegeErrorsValidate.password}</span>:null}\n        </label>\n\n        <label htmlFor='accept'>\n          <input type='checkbox' id='accept' name='accept' checked={this.state.checked} onChange={this.handleRegLog}/>Zgadzam się na regulamin, którego nie ma\n        </label>\n        {this.state.errorsValidate.checked?<span>{this.messegeErrorsValidate.checked}</span>:null}\n\n\n\n        <input type=\"submit\" value=\"rejestruj\"/>\n       </form>\n       {this.state.messegeSuccessForm && <p>{this.state.messegeSuccessForm}</p>}     \n\n\n\n\n       <form action=\"/xxx.php\" method=\"get\" noValidate className='formLog'>\n       <label htmlFor='emailLogin'>Email:\n          <input type='email' id='emailLogin' name='emailLogin' value={this.state.emailLogin} onChange={this.handleRegLog}/>\n          {this.state.errorsValidate.email?<span>{this.messegeErrorsValidate.email}</span>:null}\n        </label>\n\n\n        <label htmlFor='passwordLogin'>Hasło:\n          <input type='password' id='passwordLogin' name='passwordLogin' value={this.state.passwordLogin} onChange={this.handleRegLog}/>\n          {this.state.errorsValidate.password?<span>{this.messegeErrorsValidate.password}</span>:null}\n        </label>\n\n        <input type=\"submit\" value=\"zaloguj\"/>\n        </form>\n      \n\n       </>\n\n      )\n\n    } \n  \n  }\n  \n\n\n\n\n\n\n\n\n\n\n\nexport default RegLog\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport RegLog from './components/RegLog';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<RegLog />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}